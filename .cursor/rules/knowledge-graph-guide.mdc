# Cursor Knowledge Graph ガイド

## 概要

Cursorのナレッジグラフは、プロジェクトの知識を体系的に管理し、セッション間で一貫した開発を可能にするシステムです。エンティティ、関係性、観察情報を通じて、プロジェクトの文脈を正確に理解し、効果的な開発をサポートします。

## MCPサーバーとの連携

ナレッジグラフはMCPサーバーの一部として動作し、物理的なファイル構造を必要としません。代わりに、サーバー内部でエンティティと関係性を管理し、必要に応じて永続化を行います。

### Cursorルールの配置
プロジェクトのCursorルールは以下の場所に配置します：
```
プロジェクトルート/
└── .cursor/
    └── rules/
        └── knowledge-graph.mdc
```

## ナレッジグラフの構造

### エンティティタイプ

1. **プロジェクトエンティティ**
   - 名前形式: "[Project_Name]"（スペースはアンダースコアに置換）
   - タイプ: "project"
   - 基本観察情報：
     - プロジェクト概要
     - 開始日
     - 主要目的
     - 技術スタック
     - 開発環境
     - プロジェクト構造
     - コーディング規約
     - 開発目標
     - データモデル

2. **技術エンティティ**
   - 名前形式: 技術名（例："React", "TypeScript"）
   - タイプ: "technology"
   - 基本観察情報：
     - 技術カテゴリ
     - バージョン情報
     - 使用目的
     - 設定詳細

3. **コンポーネントエンティティ**
   - 名前形式: コンポーネント名
   - タイプ: "component"
   - 基本観察情報：
     - 機能概要
     - 依存関係
     - インターフェース定義
     - 使用パターン

4. **コンテキストエンティティ**
   - 名前形式: "[Context_Type]_[Project_Name]"
   - タイプ: "context"
   - サブタイプ：
     - "project_brief": プロジェクトの基本要件と達成目標
     - "product_context": プロジェクトの存在意義と課題解決
     - "active_context": 現在の作業状態と次のステップ
     - "system_patterns": システム構造とデザインパターン
     - "tech_context": 技術スタックと制約
     - "progress": 進捗状況と課題
   - 基本観察情報：
     - 作成日時
     - 最終更新日時
     - 状態（アクティブ/アーカイブ）
     - 内容の要約

5. **ドキュメントエンティティ**
   - 名前形式: "[Doc_Type]_[Name]"
   - タイプ: "document"
   - サブタイプ：
     - "feature_spec": 複雑な機能の仕様
     - "integration_spec": 統合仕様
     - "api_spec": API仕様
     - "test_strategy": テスト戦略
     - "deploy_guide": デプロイ手順
   - 基本観察情報：
     - 作成目的
     - 対象範囲
     - 更新履歴
     - 関連リソース

### 関係タイプ

1. **プロジェクト関連**
   - プロジェクト → 技術: "uses"
   - プロジェクト → プロジェクト: "shares_backend_with", "related_to"
   - プロジェクト → コンテキスト: "has_context"
   - プロジェクト → ドキュメント: "contains_doc"

2. **技術関連**
   - 技術 → 技術: "depends_on", "works_with"
   - 技術 → コンテキスト: "described_in"

3. **コンポーネント関連**
   - コンポーネント → コンポーネント: "imports", "extends"
   - コンポーネント → 技術: "implements"
   - コンポーネント → ドキュメント: "documented_in"

4. **コンテキスト関連**
   - コンテキスト → コンテキスト: "references", "updates"
   - コンテキスト → ドキュメント: "links_to"

5. **ドキュメント関連**
   - ドキュメント → ドキュメント: "references", "extends"
   - ドキュメント → コンテキスト: "provides_context"

## 基本ワークフロー

### 知識収集モード
```mermaid
flowchart TD
    Start[開始] --> ReadGraph[グラフ読み込み]
    ReadGraph --> Analyze[プロジェクト分析]
    Analyze --> CreateEntities[エンティティ作成]
    CreateEntities --> CreateRelations[関係性定義]
    CreateRelations --> AddObs[観察情報追加]
```

### 知識活用モード
```mermaid
flowchart TD
    Start[開始] --> Search[ノード検索]
    Search --> Open[ノード詳細取得]
    Open --> Apply[知識適用]
    Apply --> Update[必要に応じて更新]
```

## メモリサーバーの内部コマンド

### 基本コマンド

- **create_entities**: 知識グラフにエンティティを作成
- **create_relations**: エンティティ間の関係を作成
- **add_observations**: エンティティに観察情報を追加
- **delete_entities**: エンティティを削除
- **delete_observations**: 観察情報を削除
- **delete_relations**: エンティティ間の関係を削除
- **read_graph**: 知識グラフの情報を読み取り
- **search_nodes**: 特定の条件に基づいてノードを検索
- **open_nodes**: ノードの詳細情報を表示

### 実行環境

メモリサーバーは以下のコマンドで実行されています：
```bash
node C:/develop/mcp-servers/memory-server/run-memory.js
```

## 知識の更新プロセス

1. **プロジェクト識別とユーザー識別**：
   - 作業中のディレクトリ構造から現在のプロジェクトを自動認識
   - プロジェクトエンティティが存在しない場合は自動作成
   ```
   📂 プロジェクト認識：[ディレクトリ名]
   ├── 既存の場合：関連エンティティを読み込み
   └── 新規の場合：プロジェクトエンティティを作成
   ```
   - 会話の文脈からプロジェクトの追加情報を収集
   - プロジェクトが不明確な場合は明示的な確認を要求

2. **メモリ取得**：
   - search_nodesでキーワード検索
   - open_nodesで詳細情報取得
   - read_graphで全体像把握

3. **プロジェクト構造のメモリ収集**：
   - プロジェクト基本情報
   - 技術スタック
   - 開発環境
   - プロジェクト構造
   - コーディング規約
   - 開発目標
   - データモデル

4. **メモリ更新のプロジェクト別管理**：
   - プロジェクトエンティティの作成/更新
   - 技術エンティティの関連付け
   - プロジェクト固有の設定記録
   - 共通知識の汎用エンティティ化
   - プロジェクト間関係の記録

### 更新トリガー

以下の場合にナレッジグラフの更新を行います：
1. 新しいプロジェクトパターンの発見時
2. 重要な変更の実装後
3. ユーザーから「ナレッジ更新」の要求があった場合
4. コンテキストの明確化が必要な場合

```mermaid
flowchart TD
    Start[更新プロセス]
    
    subgraph Process[プロセス]
        P1[全エンティティレビュー]
        P2[現状の観察情報追加]
        P3[次のステップの明確化]
        P4[関係性の更新]
        
        P1 --> P2 --> P3 --> P4
    end
    
    Start --> Process
```

注意：「ナレッジ更新」がトリガーされた場合、すべてのエンティティと関係性を包括的にレビューする必要があります。特に、現在の状態を追跡するコンテキストエンティティに注目します。

### プロジェクトインテリジェンスの記録

`.cursor/rules/knowledge-graph.mdc`は、プロジェクトの学習ジャーナルとして機能し、以下のような重要な知見を記録します：

```mermaid
flowchart TD
    Start{新パターンの発見}
    
    subgraph Learn [学習プロセス]
        D1[パターンの特定]
        D2[ユーザーとの確認]
        D3[エンティティ・関係性の作成]
    end
    
    subgraph Apply [適用]
        A1[ナレッジグラフの読み込み]
        A2[学習した知識の適用]
        A3[将来の作業改善]
    end
    
    Start --> Learn
    Learn --> Apply
```

#### 記録対象となる知見：
- 重要な実装パターン
- ユーザーの作業フローと設定
- プロジェクト固有のパターン
- 既知の課題と解決策
- 意思決定の履歴
- ツールの使用パターン
- プロジェクト間の知識共有

これらの知見は、エンティティの観察情報として柔軟に記録し、関係性を通じて他のエンティティと結びつけます。ナレッジグラフは、協働を通じて継続的に進化する生きた知識ベースとして機能します。

## 記憶の可視化

1. **記憶の保存時**：
   ```
   📝 **記憶しました**：[内容]
   カテゴリ：[カテゴリ名]
   重要度：[高/中/低]
   ```

2. **記憶の参照時**：
   ```
   💡 **過去の記憶から**：[内容]
   記録日時：[日時]
   コンテキスト：[関連情報]
   ```

3. **記憶の更新時**：
   ```
   🔄 **記憶を更新しました**
   変更前：[旧内容]
   変更後：[新内容]
   理由：[更新理由]
   ```

## 注意点

- ナレッジグラフは過去の作業との唯一のつながり
- 各セッション開始時に完全に読み込む
- 情報の正確性が作業効率に直結
- 定期的な更新と整理が重要
- プロジェクト間の知識転用を促進 