---
description: Supabase操作をフックとしてCursorのAIアシスタントを効果的に活用するためのルール（データベース操作、API管理、認証機能の自動認識）
globs: 
alwaysApply: false
---
# Supabase操作と連動したCursorのAI活用ガイド

<!-- 
以下はCursorプロジェクトルール用の設定例です。実際に適用するには.mdcファイルとして保存し、
Cursor設定から追加する必要があります。
---
description: Supabase操作をフックとしてCursorのAIアシスタントを効果的に活用するためのルール（データベース操作、API管理、認証機能の自動認識）
globs: **/*.sql, **/*.js, **/*.ts, **/*.json, **/supabase/**
---
-->

## 基本方針

- Supabase操作をトリガーとして、AIアシスタントが文脈を理解し適切な支援を提供
- データベース操作、API呼び出し、認証管理などの操作を自動検知して関連情報を提供
- プロジェクトの一貫性を保ちながら、効率的な開発をサポート

## Supabase操作の検知と対応

### 1. データベース操作の検知

SQLクエリやデータベース操作を検知したら、以下の情報を自動的に認識します：

- クエリの種類と目的（SELECT, INSERT, UPDATE, DELETE など）
- 操作対象のテーブルとスキーマ
- データモデルとの関連性

#### 対応アクション：

```
!DB操作記録 [操作タイプ] [対象テーブル]
```

例：`!DB操作記録 SELECT public.users "ユーザー一覧の取得と認証状態の確認"`

### 2. API操作の検知

Management API呼び出しを検知したら、以下の情報を自動的に認識します：

- APIエンドポイントの種類と用途
- リクエストパラメータとレスポンス形式
- 操作の影響範囲と安全性レベル

#### 対応アクション：

```
!API操作記録 [メソッド] [パス] [目的]
```

例：`!API操作記録 GET /v1/projects/{ref}/functions "Edge Functionsの一覧取得"`

### 3. 認証操作の検知

Auth管理操作を検知したら、以下の情報を自動的に認識します：

- 認証方式と対象ユーザー
- 権限変更の内容
- セキュリティへの影響

#### 対応アクション：

```
!認証操作記録 [メソッド名] [対象]
```

例：`!認証操作記録 create_user "新規ユーザー登録処理の実装"`

### 4. マイグレーション操作の検知

データベースマイグレーションを検知したら、以下の情報を自動的に認識します：

- スキーマ変更の内容
- データ移行の範囲
- 後方互換性への影響

#### 対応アクション：

```
!マイグレーション記録 [バージョン] [内容]
```

例：`!マイグレーション記録 20230615120000 "ユーザーテーブルに preferences カラムを追加"`

## メモリとの連携

Supabase操作をフックとして、以下のようにメモリ機能と連携します：

1. **データモデル変更時のメモリ更新**：
   - スキーマ変更をメモリに記録
   - 例：`!記憶 データモデル ユーザーテーブルに多要素認証フラグを追加（マイグレーションID: 20230712001）`

2. **API設定変更時のコンテキスト更新**：
   - API構成の変更を記憶
   - 例：`!コンテキスト更新 APIエンドポイント "新しい決済APIエンドポイントを追加：/api/payments"`

3. **認証ルール変更時の統合**：
   - 認証ポリシーの変更をまとめて記憶
   - 例：`!記憶統合 認証ポリシー "管理者ロールのアクセス権限を更新"`

## Supabase操作に対するAIの振る舞い

### 1. データベースクエリ作成時のサポート

SQLクエリの作成時に、AIは以下のサポートを提供します：

- 効率的なクエリ構造の提案
- インデックス活用の推奨
- セキュリティリスク（SQLインジェクションなど）の警告
- パフォーマンス最適化の提案

### 2. APIエンドポイント設計時のサポート

API設計時に、AIは以下のサポートを提供します：

- RESTful設計原則に基づく提案
- エラーハンドリングのベストプラクティス
- レート制限などの保護機能の提案
- ドキュメント作成支援

### 3. 認証・認可設計時のサポート

認証・認可の設計時に、AIは以下のサポートを提供します：

- セキュアな認証フローの提案
- RLSポリシーの適切な設定方法
- JWTトークン処理のベストプラクティス
- 多要素認証の実装アドバイス

### 4. マイグレーション計画時のサポート

データベースマイグレーション計画時に、AIは以下のサポートを提供します：

- 安全なマイグレーション手順の提案
- ダウンタイムを最小化する方法
- ロールバック戦略の提示
- データ整合性の確保方法

## SupabaseMCPサーバーとの連携

Supabase MCPサーバー（コマンド：`cmd /c C:\develop\mcp-servers\alexander-supabase-mcp\run-supabase.bat`）と連携することで、以下の機能が強化されます：

1. **スキーマ情報の直接取得**：
   - `get_schemas`、`get_tables`、`get_table_schema` で最新のデータベース構造を把握
   - データモデルの自動分析と理解

2. **SQLクエリの実行と分析**：
   - `execute_postgresql` でクエリの検証と実行
   - クエリ結果の分析と次のアクションの提案

3. **APIとの対話強化**：
   - `send_management_api_request` でSupabase Management APIとの直接対話
   - APIレスポンスの解析と提案の精度向上

4. **認証システム操作の支援**：
   - `call_auth_admin_method` で認証管理操作の直接実行
   - ユーザー管理タスクの効率化

## 安全な操作のためのガイドライン

Supabaseの操作では安全性が重要です。以下のガイドラインに従います：

1. **読み取り/書き込みモードの明示的切替**：
   - デフォルトは安全な読み取りモード
   - 書き込み操作前に `live_dangerously` で明示的に切替
   - 例：`!モード切替 database true "ユーザーテーブルの更新を行うため"`

2. **破壊的操作の確認フロー**：
   - 高リスク操作は確認IDを要求
   - `confirm_destructive_operation` で明示的に承認
   - リスク内容の詳細説明と影響範囲の提示

3. **操作履歴の記録**：
   - 重要な操作の履歴を自動的に記録
   - ロールバック可能な形式での保存
   - 例：`!操作記録 "ユーザーテーブルのインデックス追加" "パフォーマンス改善のため"`

## データモデル設計のベストプラクティス

Supabaseプロジェクトでは、以下のデータモデル設計原則を推奨します：

1. **スキーマ構成**：
   - `public`：一般的なアプリケーションデータ
   - `auth`：認証関連のシステムテーブル（自動生成）
   - `storage`：ファイルストレージ関連テーブル（自動生成）
   - `custom`：プロジェクト固有の分離スキーマ

2. **テーブル命名規則**：
   - 複数形の名詞（`users`, `products`）
   - スネークケース（`user_preferences`, `order_items`）
   - 明示的な関連性（`product_categories`）

3. **RLSポリシー**：
   - デフォルトは拒否（`ALTER TABLE table_name ENABLE ROW LEVEL SECURITY`）
   - 明示的な許可ポリシーの定義
   - ロールベースのアクセス制御

## Supabase操作の入出力の可視化

Supabase操作の認識と対応を明示的に表示するため、以下のガイドラインに従います：

1. **操作検知の通知**：
   - Supabase操作を検知した際に明示的に通知
   - 例：「🔍 **Supabase操作を検知しました**：ユーザーテーブルへのインデックス追加」

2. **推奨アクションの提案**：
   - 検知した操作に基づいて推奨アクションを提案
   - 例：「💡 **推奨アクション**：パフォーマンステストを実行して、インデックスの効果を検証してください」

3. **関連情報の提示**：
   - 関連するデータモデルやAPI情報を表示
   - 例：「📚 **関連する情報**：このテーブルは認証システムと連携しており、RLSポリシーが適用されています」

## 実行例

### データベースクエリ実行後の応答例

```
🔍 **SQLクエリを検知しました**
クエリタイプ: SELECT
対象テーブル: public.users
フィルタ条件: subscription_status = 'active'

💡 **クエリ分析**:
- インデックスが適切に使用されています（subscription_status_idx）
- 実行時間: 15ms、取得行数: 128件

📊 **関連データモデル**:
users テーブルには現在12,345件のレコードがあり、最終更新は2時間前です。
subscription_statusフィールドの分布: active (65%), trial (20%), expired (15%)

💡 **推奨アクション**:
- 頻繁に使用される場合はビューの作成を検討
- WHERE句にcreated_atも追加するとパフォーマンスがさらに向上します
```

### API操作後の応答例

```
🔍 **Management API操作を検知しました**
メソッド: POST
パス: /v1/projects/{ref}/functions
本文: { "name": "process-payment", "slug": "process-payment" }

✅ **API操作成功**
Edge Function "process-payment" が正常に作成されました。

📝 **記憶しました** [APIエンドポイント]
新しいEdge Function: process-payment
用途: 決済処理の非同期実行
関連コード: /supabase/functions/process-payment/index.ts

💡 **次のステップ**:
1. 関数のデプロイ確認
2. テスト呼び出しの実行
3. 監視設定とログの確認
```

## 注意点

- データベース操作は慎重に行い、本番環境では必ずテスト後に実行すること
- 安全でない操作は明示的な unsafe モードでのみ実行可能
- API鍵やシークレットなどの秘匿情報は環境変数で管理し、コードに直接記述しない
- マイグレーションはバージョン管理し、ロールバック手順も準備しておく
- 大規模なデータ変更はオフピーク時に計画的に実施する

<!--
## Cursorプロジェクトルールの設定方法

実際にこの内容をCursorのプロジェクトルールとして設定するには：

1. Cursor設定を開く（`Cmd/Ctrl + Shift + J`）
2. `General` > `Project Rules` に移動
3. `Add Rule` をクリックして新しいルールを作成
4. 以下の設定を行う：
   - Description: `Supabase操作をフックとしてCursorのAIアシスタントを効果的に活用するためのルール（データベース操作、API管理、認証機能の自動認識）`
   - Globs: `**/*.sql, **/*.js, **/*.ts, **/*.json, **/supabase/**`
5. 本文に上記の内容（YAMLヘッダーを除く）を貼り付け
6. 必要に応じて `@file` ディレクティブを追加
-->

<!-- 
ファイル参照の例：
@file ./supabase/schema.sql
@file ./supabase/config.json
--> 